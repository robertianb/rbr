%package "supersql";
%class "SupersqlParser";

%import "supersql.ast.*";
%import "supersql.ast.entities.*";
%import "supersql.ast.entities.predicate.*";
%import "supersql.ast.entities.expr.*";
%import "supersql.ast.types.*";
%import "supersql.ast.changes.*";
%import "supersql.ast.actions.*";


%embed {:
    ScriptSemantics sema;

    protected void recoverFromError(beaver.Symbol token, beaver.Parser.TokenStream in) throws java.io.IOException, beaver.Parser.Exception
    {
         try {
          super.recoverFromError(token,in);
         } catch (beaver.Parser.Exception e) {
             SuperSqlEvents.getInstance().recoverFailed(e);
             throw e;
         }
    }
:}
;

%init {:
    this.sema = new ScriptSemantics();
    this.report = SuperSqlEvents.getInstance();
:}
;

%terminals LPAREN, RPAREN;
%terminals COMMA, CREATE, TABLE, PRIMARY;
// %terminals IS, NOT;
%terminals DEFAULT, KEY, ALTER, MODIFY, ADD, DROP, COLUMN, CONSTRAINT, NULL, NOT, CHECK, IN, BETWEEN, IS;
%terminals INT, LONG, VARCHAR, FLOAT, STRING_LITERAL, CLOB, NVARCHAR;
%terminals FLOATING_POINT_LITERAL, INTEGER_LITERAL, IDENT, NUMBER, CHAR, TIMESTAMP, DATE;
%terminals  LT, GT, GE, LE, EQ, PLUS, MINUS, DIV, MULT;
%terminals AND, OR;


%typeof IDENT = "String";
%typeof null_value="MandatorySymbol";
%typeof INTEGER_LITERAL = "Integer";
%typeof FLOATING_POINT_LITERAL = "Float";
%typeof STRING_LITERAL = "String";
%typeof script = "ScriptSemantics";
%typeof type = "TypeDefinition";
%typeof type_and_default_value = "TypeAndDefaultValue";
%typeof constraint_def="PrimaryKeyConstraint";
%typeof columns_list = "Columns";
%typeof column_def = "ColumnDefinition";
%typeof columns_def = "ColumnDefinitions";
%typeof command = "ScriptAction";
%typeof command_seq= "ScriptActions";
%typeof create_table = "ScriptAction";
%typeof expr = "Expr";
%typeof default_value = "Expr";
%typeof predicate = "Predicate";
%typeof column_constraint_body = "Predicate";
%typeof value_list = "ValueList";
%typeof string_list = "StringList";
%typeof value = "Expr";
%typeof column_constraint_def = "ColumnConstraintDefinition";

%goal script;




script = command_seq.s {: sema.addActions(s); return sema; :}
;

command_seq = command.c DIV command_seq.s {: ScriptActions res = ScriptActions.create(c); res.addScriptActions(s); return res;  :}
| command.c {:  return ScriptActions.create(c); :}
;


command = create_table.c {:  return c; :}
| add_column
| drop_column
| modify_column
|  {: return new VoidAction(); :}
;


modify_column = ALTER TABLE IDENT.t MODIFY COLUMN column_def.c {: return new ModifyColumnTypeAction(t, c);  :}
;

add_column = ALTER TABLE IDENT.t ADD COLUMN column_def.c {: return new AddColumnsAction(t, ColumnDefinitions.create(c).getColumnDefinitions());  :}
| ALTER TABLE IDENT.t ADD LPAREN columns_def.d RPAREN {: return new AddColumnsAction(t, d.getColumnDefinitions());  :}
;

drop_column =
ALTER TABLE IDENT.t DROP COLUMN IDENT.c {: return new DeleteColumnsAction(t, Columns.create(c).getColumns());  :}
| ALTER TABLE IDENT.t DROP LPAREN columns_list.d RPAREN {: return new DeleteColumnsAction(t, d.getColumns());  :}
;

columns_list = IDENT.c {: return Columns.create(new Column(c)); :}
| IDENT.d COMMA columns_list.l {: Columns s = Columns.create(new Column(d)); s.addColumns(l); return s; :}
;

create_table = CREATE TABLE IDENT.i LPAREN columns_def.d COMMA constraint_def.c RPAREN {: return new CreateTableAction(i,d.getColumnDefinitions(), c); :}
| CREATE TABLE IDENT.i LPAREN columns_def.d RPAREN {: return new CreateTableAction(i,d.getColumnDefinitions()); :}
;



columns_def = column_def.c  {: return ColumnDefinitions.create(c); :}
| columns_def.d COMMA column_def.c {: d.addColumnDef(c); return d; :}
;


column_def = IDENT.i type_and_default_value.t null_value.m column_constraint_def.c {: return new ColumnDefinition(i, t.getTypeDefinition(), t.getDefaultValue(), m.isMandatory(), c) ; :}
  | IDENT.i type_and_default_value.t null_value.m default_value column_constraint_def.c {: return new ColumnDefinition(i, t.getTypeDefinition(), t.getDefaultValue(), m.isMandatory(), c) ; :}
;

type_and_default_value = type.t  {: return new TypeAndDefaultValue(t); :}
| type.t default_value.d  {: return new TypeAndDefaultValue(t,d); :}
;

default_value = DEFAULT INTEGER_LITERAL.n {: return new IntExpr(n); :}
| DEFAULT FLOATING_POINT_LITERAL.f {: return new DoubleExpr(f); :}
| DEFAULT STRING_LITERAL.s  {: return new StringExpr(s); :}
;

column_constraint_def = CONSTRAINT IDENT.c column_constraint_body.b {: return new ColumnConstraintDefinition(c,b); :}
| 
;


column_constraint_body = CHECK LPAREN predicate.p RPAREN {: return p; :}
;

string_list = STRING_LITERAL.s {: return new StringList(s); :}
| STRING_LITERAL.s COMMA string_list.l {: return new StringList(s).append(l); :}
;

value_list = value.v
| value.v COMMA value_list.l {: return l.prepend(v) ; :}
;

value =  INTEGER_LITERAL.n {: return new IntExpr(n);  :}
| FLOATING_POINT_LITERAL.n  {: return new DoubleExpr(n);  :}
; 


null_value = NULL {: return new MandatorySymbol(false); :}
| NOT NULL {: return new MandatorySymbol(true); :}
| {: return new MandatorySymbol(false); :}
;

constraint_def = CONSTRAINT IDENT.c PRIMARY KEY LPAREN columns_list.l RPAREN {: return new PrimaryKeyConstraint(c,l); :}
;

type = INT {: return new TypeDefinition(Type.INT); :}
| CLOB {: return new TypeDefinition(Type.CLOB); :}
| TIMESTAMP LPAREN INTEGER_LITERAL.i RPAREN {: return new TimestampTypeDefinition(i); :}
| DATE  {: return new DateTypeDefinition(); :}
| CHAR LPAREN INTEGER_LITERAL RPAREN {: return new TypeDefinition(Type.CHAR); :}
| NUMBER LPAREN INTEGER_LITERAL.i RPAREN {: return new NumberTypeDefinition(i); :}
| LONG LPAREN INTEGER_LITERAL.n RPAREN {: return new VarcharTypeDefinition(n); :}
| FLOAT {: return new TypeDefinition(Type.FLOAT); :}
| VARCHAR LPAREN INTEGER_LITERAL.n RPAREN {: return new VarcharTypeDefinition(n); :}
| NVARCHAR LPAREN INTEGER_LITERAL.n RPAREN {: return new NVarcharTypeDefinition(n); :}
;




predicate = predicate OR predicate
| predicate AND predicate
| LPAREN predicate.p RPAREN {: return new EnclosedPredicate(p); :} 
| IDENT.i IN LPAREN string_list.l RPAREN {: return new InListPredicate(i,l); :} 
| IDENT.i IN LPAREN columns_list.l RPAREN {: return new InListPredicate(i,l); :} 
| IDENT.i IN LPAREN value_list.l RPAREN {: return new InListPredicate(i,l); :} 
| IDENT.i BETWEEN expr.a AND expr.b {: return new BetweenPredicate(i,a,b); :}
| IDENT.i IS null_value {: return new IsNullPredicate(i); :}
| expr.a LT expr.b {: return new ComparisonPredicate(a,b,ComparisonPredicate.OP.LT); :}
| expr.a GT expr.b {: return new ComparisonPredicate(a,b,ComparisonPredicate.OP.GT); :}
| expr.a GE expr.b {: return new ComparisonPredicate(a,b,ComparisonPredicate.OP.GE); :}
| expr.a LE expr.b {: return new ComparisonPredicate(a,b,ComparisonPredicate.OP.LE); :}
| expr.a EQ expr.b {: return new ComparisonPredicate(a,b,ComparisonPredicate.OP.EQ); :}
;

 

expr = expr.a MULT  expr.b           {: return new BinaryExpr(a,'*',b);   :}
    | expr.a DIV   expr.b           {: return new BinaryExpr(a,'/',b);   :}
    | expr.a PLUS  expr.b           {: return new BinaryExpr(a,'+',b);   :}
    | expr.a MINUS expr.b           {: return new BinaryExpr(a,'-',b);    :}
    | LPAREN expr.e RPAREN          {: return new EnclosedExpr(e); :}
//    | MINUS expr.e @ UNARY_MINUS    {: return new Expr(-e.val);          :}
    |  INTEGER_LITERAL.n                      {: return new IntExpr(n); :}
    |  FLOATING_POINT_LITERAL.n                      {: return new DoubleExpr(n); :}
    | IDENT.i {: return new VarExpr(i); :}
    ;

/* The following code was generated by JFlex 1.4.2 on 05/06/13 17:45 */

package supersql;

import beaver.Symbol;
import beaver.Scanner;

import supersql.Terminals;

import supersql.ast.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.2
 * on 05/06/13 17:45 from the specification file
 * <tt>D:/rbrouard/eclipse_workspaces/hmm-trunk-test/rbr/supersql/src/main/resources/supersql.flex</tt>
 */
class SupersqlScanner extends Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\10\1\3\1\2\1\0\1\3\1\1\16\10\4\0\1\3\3\0"+
    "\1\7\2\0\1\77\1\30\1\31\1\37\1\35\1\76\1\11\1\6"+
    "\1\36\1\4\1\5\1\74\7\5\2\0\1\32\1\33\1\34\2\0"+
    "\1\50\1\43\1\40\1\53\1\55\1\67\1\64\1\47\1\56\2\7"+
    "\1\41\1\57\1\62\1\42\1\61\1\7\1\51\1\60\1\54\1\63"+
    "\1\73\2\7\1\71\1\7\1\0\1\12\2\0\1\7\1\0\1\16"+
    "\1\21\1\13\1\22\1\15\1\66\1\65\1\52\1\44\1\7\1\72"+
    "\1\20\1\26\1\27\1\23\1\24\1\7\1\14\1\45\1\17\1\25"+
    "\1\75\1\46\1\7\1\70\1\7\4\0\41\10\2\0\4\7\4\0"+
    "\1\7\2\0\1\10\7\0\1\7\4\0\1\7\5\0\27\7\1\0"+
    "\37\7\1\0\u013f\7\31\0\162\7\4\0\14\7\16\0\5\7\11\0"+
    "\1\7\21\0\130\10\5\0\23\10\12\0\1\7\13\0\1\7\1\0"+
    "\3\7\1\0\1\7\1\0\24\7\1\0\54\7\1\0\46\7\1\0"+
    "\5\7\4\0\202\7\1\0\4\10\3\0\105\7\1\0\46\7\2\0"+
    "\2\7\6\0\20\7\41\0\46\7\2\0\1\7\7\0\47\7\11\0"+
    "\21\10\1\0\27\10\1\0\3\10\1\0\1\10\1\0\2\10\1\0"+
    "\1\10\13\0\33\7\5\0\3\7\15\0\4\10\14\0\6\10\13\0"+
    "\32\7\5\0\13\7\16\10\7\0\12\10\4\0\2\7\1\10\143\7"+
    "\1\0\1\7\10\10\1\0\6\10\2\7\2\10\1\0\4\10\2\7"+
    "\12\10\3\7\2\0\1\7\17\0\1\10\1\7\1\10\36\7\33\10"+
    "\2\0\3\7\60\0\46\7\13\10\1\7\u014f\0\3\10\66\7\2\0"+
    "\1\10\1\7\20\10\2\0\1\7\4\10\3\0\12\7\2\10\2\0"+
    "\12\10\21\0\3\10\1\0\10\7\2\0\2\7\2\0\26\7\1\0"+
    "\7\7\1\0\1\7\3\0\4\7\2\0\1\10\1\7\7\10\2\0"+
    "\2\10\2\0\3\10\11\0\1\10\4\0\2\7\1\0\3\7\2\10"+
    "\2\0\12\10\4\7\15\0\3\10\1\0\6\7\4\0\2\7\2\0"+
    "\26\7\1\0\7\7\1\0\2\7\1\0\2\7\1\0\2\7\2\0"+
    "\1\10\1\0\5\10\4\0\2\10\2\0\3\10\13\0\4\7\1\0"+
    "\1\7\7\0\14\10\3\7\14\0\3\10\1\0\11\7\1\0\3\7"+
    "\1\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0\1\10"+
    "\1\7\10\10\1\0\3\10\1\0\3\10\2\0\1\7\17\0\2\7"+
    "\2\10\2\0\12\10\1\0\1\7\17\0\3\10\1\0\10\7\2\0"+
    "\2\7\2\0\26\7\1\0\7\7\1\0\2\7\1\0\5\7\2\0"+
    "\1\10\1\7\6\10\3\0\2\10\2\0\3\10\10\0\2\10\4\0"+
    "\2\7\1\0\3\7\4\0\12\10\1\0\1\7\20\0\1\10\1\7"+
    "\1\0\6\7\3\0\3\7\1\0\4\7\3\0\2\7\1\0\1\7"+
    "\1\0\2\7\3\0\2\7\3\0\3\7\3\0\10\7\1\0\3\7"+
    "\4\0\5\10\3\0\3\10\1\0\4\10\11\0\1\10\17\0\11\10"+
    "\11\0\1\7\7\0\3\10\1\0\10\7\1\0\3\7\1\0\27\7"+
    "\1\0\12\7\1\0\5\7\4\0\7\10\1\0\3\10\1\0\4\10"+
    "\7\0\2\10\11\0\2\7\4\0\12\10\22\0\2\10\1\0\10\7"+
    "\1\0\3\7\1\0\27\7\1\0\12\7\1\0\5\7\2\0\1\10"+
    "\1\7\7\10\1\0\3\10\1\0\4\10\7\0\2\10\7\0\1\7"+
    "\1\0\2\7\4\0\12\10\22\0\2\10\1\0\10\7\1\0\3\7"+
    "\1\0\27\7\1\0\20\7\4\0\6\10\2\0\3\10\1\0\4\10"+
    "\11\0\1\10\10\0\2\7\4\0\12\10\22\0\2\10\1\0\22\7"+
    "\3\0\30\7\1\0\11\7\1\0\1\7\2\0\7\7\3\0\1\10"+
    "\4\0\6\10\1\0\1\10\1\0\10\10\22\0\2\10\15\0\60\7"+
    "\1\10\2\7\7\10\4\0\10\7\10\10\1\0\12\10\47\0\2\7"+
    "\1\0\1\7\2\0\2\7\1\0\1\7\2\0\1\7\6\0\4\7"+
    "\1\0\7\7\1\0\3\7\1\0\1\7\1\0\1\7\2\0\2\7"+
    "\1\0\4\7\1\10\2\7\6\10\1\0\2\10\1\7\2\0\5\7"+
    "\1\0\1\7\1\0\6\10\2\0\12\10\2\0\2\7\42\0\1\7"+
    "\27\0\2\10\6\0\12\10\13\0\1\10\1\0\1\10\1\0\1\10"+
    "\4\0\2\10\10\7\1\0\42\7\6\0\24\10\1\0\2\10\4\7"+
    "\4\0\10\10\1\0\44\10\11\0\1\10\71\0\42\7\1\0\5\7"+
    "\1\0\2\7\1\0\7\10\3\0\4\10\6\0\12\10\6\0\6\7"+
    "\4\10\106\0\46\7\12\0\51\7\7\0\132\7\5\0\104\7\5\0"+
    "\122\7\6\0\7\7\1\0\77\7\1\0\1\7\1\0\4\7\2\0"+
    "\7\7\1\0\1\7\1\0\4\7\2\0\47\7\1\0\1\7\1\0"+
    "\4\7\2\0\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0"+
    "\1\7\1\0\4\7\2\0\7\7\1\0\7\7\1\0\27\7\1\0"+
    "\37\7\1\0\1\7\1\0\4\7\2\0\7\7\1\0\47\7\1\0"+
    "\23\7\16\0\11\10\56\0\125\7\14\0\u026c\7\2\0\10\7\12\0"+
    "\32\7\5\0\113\7\3\0\3\7\17\0\15\7\1\0\4\7\3\10"+
    "\13\0\22\7\3\10\13\0\22\7\2\10\14\0\15\7\1\0\3\7"+
    "\1\0\2\10\14\0\64\7\40\10\3\0\1\7\3\0\2\7\1\10"+
    "\2\0\12\10\41\0\3\10\2\0\12\10\6\0\130\7\10\0\51\7"+
    "\1\10\126\0\35\7\3\0\14\10\4\0\14\10\12\0\12\10\36\7"+
    "\2\0\5\7\u038b\0\154\7\224\0\234\7\4\0\132\7\6\0\26\7"+
    "\2\0\6\7\2\0\46\7\2\0\6\7\2\0\10\7\1\0\1\7"+
    "\1\0\1\7\1\0\1\7\1\0\37\7\2\0\65\7\1\0\7\7"+
    "\1\0\1\7\3\0\3\7\1\0\7\7\3\0\4\7\2\0\6\7"+
    "\4\0\15\7\5\0\3\7\1\0\7\7\17\0\4\10\32\0\5\10"+
    "\20\0\2\7\23\0\1\7\13\0\4\10\6\0\6\10\1\0\1\7"+
    "\15\0\1\7\40\0\22\7\36\0\15\10\4\0\1\10\3\0\6\10"+
    "\27\0\1\7\4\0\1\7\2\0\12\7\1\0\1\7\3\0\5\7"+
    "\6\0\1\7\1\0\1\7\1\0\1\7\1\0\4\7\1\0\3\7"+
    "\1\0\7\7\3\0\3\7\5\0\5\7\26\0\44\7\u0e81\0\3\7"+
    "\31\0\11\7\6\10\1\0\5\7\2\0\5\7\4\0\126\7\2\0"+
    "\2\10\2\0\3\7\1\0\137\7\5\0\50\7\4\0\136\7\21\0"+
    "\30\7\70\0\20\7\u0200\0\u19b6\7\112\0\u51a6\7\132\0\u048d\7\u0773\0"+
    "\u2ba4\7\u215c\0\u012e\7\2\0\73\7\225\0\7\7\14\0\5\7\5\0"+
    "\1\7\1\10\12\7\1\0\15\7\1\0\5\7\1\0\1\7\1\0"+
    "\2\7\1\0\2\7\1\0\154\7\41\0\u016b\7\22\0\100\7\2\0"+
    "\66\7\50\0\15\7\3\0\20\10\20\0\4\10\17\0\2\7\30\0"+
    "\3\7\31\0\1\7\6\0\5\7\1\0\207\7\2\0\1\10\4\0"+
    "\1\7\13\0\12\10\7\0\32\7\4\0\1\7\1\0\32\7\12\0"+
    "\132\7\3\0\6\7\2\0\6\7\2\0\6\7\2\0\3\7\3\0"+
    "\2\7\3\0\2\7\22\0\3\10\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\2\3\1\1\1\4\1\5\11\4"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\15\4"+
    "\1\15\1\16\1\17\1\2\1\1\1\20\2\21\1\2"+
    "\14\4\1\22\4\4\1\23\1\24\4\4\1\25\1\26"+
    "\13\4\1\27\2\2\7\4\1\30\1\31\6\4\1\32"+
    "\7\4\1\33\2\4\1\33\5\4\1\34\3\4\1\35"+
    "\3\4\1\36\2\4\1\37\1\4\1\40\2\4\1\41"+
    "\4\4\1\42\14\4\1\43\1\44\1\45\14\4\1\46"+
    "\2\4\1\47\1\50\4\4\1\51\12\4\1\52\1\53"+
    "\1\54\2\4\1\33\2\4\1\55\1\4\1\56\2\4"+
    "\1\55\1\4\1\56\1\4\1\57\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\200\0\200\0\u0480\0\u04c0\0\200\0\200"+
    "\0\200\0\u0500\0\u0540\0\u0580\0\u05c0\0\u0600\0\u0640\0\u0680"+
    "\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0\0\u0800\0\200\0\200"+
    "\0\u0840\0\u0880\0\u08c0\0\200\0\u0100\0\u0180\0\u0900\0\u0940"+
    "\0\u0980\0\u09c0\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40"+
    "\0\u0b80\0\u0bc0\0\u0c00\0\u01c0\0\u0c40\0\u0c80\0\u0cc0\0\u0d00"+
    "\0\200\0\200\0\u0d40\0\u0d80\0\u0dc0\0\u0e00\0\u0e40\0\u01c0"+
    "\0\u0e80\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u1040"+
    "\0\u1080\0\u10c0\0\u1100\0\200\0\u1140\0\200\0\u1180\0\u11c0"+
    "\0\u1200\0\u1240\0\u1280\0\u12c0\0\u1300\0\u01c0\0\u01c0\0\u1340"+
    "\0\u1380\0\u13c0\0\u1400\0\u1440\0\u1480\0\u01c0\0\u14c0\0\u1500"+
    "\0\u1540\0\u1580\0\u15c0\0\u1600\0\u1640\0\u1680\0\u16c0\0\u1700"+
    "\0\u1740\0\u1780\0\u17c0\0\u1800\0\u1840\0\u1880\0\u01c0\0\u18c0"+
    "\0\u1900\0\u1940\0\u01c0\0\u1980\0\u19c0\0\u1a00\0\u01c0\0\u1a40"+
    "\0\u1a80\0\u01c0\0\u1ac0\0\u01c0\0\u1b00\0\u1b40\0\u01c0\0\u1b80"+
    "\0\u1bc0\0\u1c00\0\u1c40\0\u01c0\0\u1c80\0\u1cc0\0\u1d00\0\u1d40"+
    "\0\u1d80\0\u1dc0\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u1f00\0\u1f40"+
    "\0\u01c0\0\u01c0\0\u01c0\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080"+
    "\0\u20c0\0\u2100\0\u2140\0\u2180\0\u21c0\0\u2200\0\u2240\0\u01c0"+
    "\0\u2280\0\u22c0\0\u01c0\0\u01c0\0\u2300\0\u2340\0\u2380\0\u23c0"+
    "\0\u01c0\0\u2400\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580"+
    "\0\u25c0\0\u2600\0\u2640\0\u01c0\0\u01c0\0\u01c0\0\u2680\0\u26c0"+
    "\0\u01c0\0\u2700\0\u2740\0\u2780\0\u27c0\0\u2800\0\u2840\0\u2880"+
    "\0\u01c0\0\u28c0\0\u01c0\0\u2900\0\u01c0\0\u01c0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\3\4\1\5\1\6\1\7\1\10\1\3\1\11"+
    "\1\3\1\12\2\10\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\10\1\22\1\23\1\24\1\25\1\3"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\2\10\1\34"+
    "\6\10\1\35\1\36\1\10\1\37\2\10\1\40\1\41"+
    "\3\10\1\42\1\43\2\10\1\44\1\45\1\6\1\46"+
    "\1\47\1\50\1\51\2\4\1\52\6\51\1\53\64\51"+
    "\1\54\101\0\3\4\100\0\2\55\1\56\65\0\1\55"+
    "\7\0\2\6\1\56\65\0\1\6\7\0\2\56\66\0"+
    "\1\56\7\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\36\10\13\0\1\57\72\0\2\10\1\0\2\10\2\0"+
    "\1\10\1\60\3\10\1\61\2\10\1\62\4\10\10\0"+
    "\12\10\1\63\23\10\6\0\2\10\1\0\2\10\2\0"+
    "\5\10\1\64\1\10\1\65\4\10\1\66\10\0\36\10"+
    "\6\0\2\10\1\0\2\10\2\0\3\10\1\67\11\10"+
    "\10\0\36\10\6\0\2\10\1\0\2\10\2\0\10\10"+
    "\1\70\4\10\10\0\36\10\6\0\2\10\1\0\2\10"+
    "\2\0\2\10\1\71\12\10\10\0\36\10\6\0\2\10"+
    "\1\0\2\10\2\0\1\10\1\72\1\73\12\10\10\0"+
    "\36\10\6\0\2\10\1\0\2\10\2\0\1\10\1\74"+
    "\13\10\10\0\36\10\6\0\2\10\1\0\2\10\2\0"+
    "\1\10\1\75\13\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\10\10\1\76\1\10\1\77\2\10\10\0"+
    "\35\10\1\100\35\0\1\101\77\0\1\102\50\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\1\10\1\103\1\104"+
    "\4\10\1\105\26\10\6\0\2\10\1\0\2\10\2\0"+
    "\15\10\10\0\2\10\1\106\33\10\6\0\2\10\1\0"+
    "\2\10\2\0\14\10\1\107\10\0\5\10\1\110\30\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\10\10"+
    "\1\111\25\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\16\10\1\112\17\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\22\10\1\113\13\10\6\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\11\10\1\114\24\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\23\10"+
    "\1\115\7\10\1\116\2\10\6\0\2\10\1\0\2\10"+
    "\2\0\5\10\1\117\7\10\10\0\36\10\6\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\1\10\1\120\34\10"+
    "\6\0\2\10\1\0\2\10\2\0\2\10\1\121\12\10"+
    "\10\0\36\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\10\10\1\122\25\10\6\0\2\10\1\0\2\10"+
    "\2\0\3\10\1\123\11\10\10\0\36\10\2\0\1\51"+
    "\2\0\7\51\1\0\64\51\1\0\1\51\2\4\1\52"+
    "\6\51\1\0\64\51\1\0\2\124\1\0\75\124\1\57"+
    "\1\125\1\126\75\57\4\0\2\10\1\0\2\10\2\0"+
    "\2\10\1\127\12\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\10\10\1\130\4\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\5\10\1\131\6\10\1\132"+
    "\10\0\36\10\6\0\2\10\1\0\2\10\2\0\2\10"+
    "\1\133\1\134\11\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\4\10\1\135\10\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\7\10\1\136\5\10\10\0"+
    "\36\10\6\0\2\10\1\0\2\10\2\0\7\10\1\137"+
    "\5\10\10\0\36\10\6\0\2\10\1\0\2\10\2\0"+
    "\6\10\1\140\6\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\14\10\1\141\10\0\36\10\6\0\2\10"+
    "\1\0\2\10\2\0\4\10\1\142\10\10\10\0\36\10"+
    "\6\0\2\10\1\0\2\10\2\0\10\10\1\143\4\10"+
    "\10\0\36\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\26\10\1\144\7\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\4\10\1\145\31\10\6\0\2\10"+
    "\1\0\2\10\2\0\4\10\1\146\10\10\10\0\36\10"+
    "\6\0\2\10\1\0\2\10\2\0\5\10\1\147\5\10"+
    "\1\150\1\10\10\0\36\10\6\0\2\10\1\0\2\10"+
    "\2\0\3\10\1\151\11\10\10\0\36\10\6\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\2\10\1\152\33\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\22\10"+
    "\1\153\13\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\10\10\1\154\25\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\22\10\1\155\13\10\6\0\2\10"+
    "\1\0\2\10\2\0\4\10\1\156\10\10\10\0\36\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\14\10"+
    "\1\157\21\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\17\10\1\160\16\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\14\10\1\161\21\10\6\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\16\10\1\162\17\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\17\10"+
    "\1\163\16\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\10\10\1\164\25\10\6\0\2\10\1\0\2\10"+
    "\2\0\10\10\1\165\4\10\10\0\36\10\6\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\2\10\1\166\33\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\30\10"+
    "\1\167\5\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\11\10\1\170\24\10\6\0\2\10\1\0\2\10"+
    "\2\0\1\10\1\171\13\10\10\0\36\10\4\0\1\126"+
    "\101\0\2\10\1\0\2\10\2\0\3\10\1\172\11\10"+
    "\10\0\36\10\6\0\2\10\1\0\2\10\2\0\6\10"+
    "\1\173\6\10\10\0\36\10\6\0\2\10\1\0\2\10"+
    "\2\0\12\10\1\174\2\10\10\0\36\10\6\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\5\10\1\175\30\10"+
    "\6\0\2\10\1\0\2\10\2\0\1\176\14\10\10\0"+
    "\36\10\6\0\2\10\1\0\2\10\2\0\1\10\1\177"+
    "\13\10\10\0\36\10\6\0\2\10\1\0\2\10\2\0"+
    "\2\10\1\200\12\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\5\10\1\201\7\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\15\10\10\0\25\10\1\202"+
    "\10\10\6\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\6\10\1\203\27\10\6\0\2\10\1\0\2\10\2\0"+
    "\11\10\1\204\3\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\3\10\1\205\11\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\13\10\1\206\1\10\10\0"+
    "\36\10\6\0\2\10\1\0\2\10\2\0\5\10\1\207"+
    "\7\10\10\0\36\10\6\0\2\10\1\0\2\10\2\0"+
    "\6\10\1\210\6\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\1\10\1\211\13\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\15\10\10\0\3\10\1\173"+
    "\32\10\6\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\20\10\1\212\15\10\6\0\2\10\1\0\2\10\2\0"+
    "\15\10\10\0\11\10\1\177\24\10\6\0\2\10\1\0"+
    "\2\10\2\0\15\10\10\0\24\10\1\202\11\10\6\0"+
    "\2\10\1\0\2\10\2\0\2\10\1\213\12\10\10\0"+
    "\36\10\6\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\15\10\1\214\20\10\6\0\2\10\1\0\2\10\2\0"+
    "\15\10\10\0\15\10\1\215\20\10\6\0\2\10\1\0"+
    "\2\10\2\0\15\10\10\0\15\10\1\216\20\10\6\0"+
    "\2\10\1\0\2\10\2\0\15\10\10\0\17\10\1\217"+
    "\16\10\6\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\3\10\1\220\32\10\6\0\2\10\1\0\2\10\2\0"+
    "\15\10\10\0\11\10\1\221\24\10\6\0\2\10\1\0"+
    "\2\10\2\0\3\10\1\222\11\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\15\10\10\0\10\10\1\223"+
    "\25\10\6\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\1\224\35\10\6\0\2\10\1\0\2\10\2\0\1\225"+
    "\14\10\10\0\36\10\6\0\2\10\1\0\2\10\2\0"+
    "\4\10\1\226\10\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\13\10\1\227\1\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\4\10\1\230\10\10\10\0"+
    "\36\10\6\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\32\10\1\231\3\10\6\0\2\10\1\0\2\10\2\0"+
    "\1\10\1\232\13\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\2\10\1\233\12\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\2\10\1\234\12\10\10\0"+
    "\36\10\6\0\2\10\1\0\2\10\2\0\12\10\1\235"+
    "\2\10\10\0\36\10\6\0\2\10\1\0\2\10\2\0"+
    "\3\10\1\236\11\10\10\0\36\10\6\0\2\10\1\0"+
    "\2\10\2\0\2\10\1\237\12\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\1\240\14\10\10\0\36\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\14\10"+
    "\1\241\21\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\25\10\1\242\10\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\20\10\1\243\15\10\6\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\24\10\1\244\11\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\10\10"+
    "\1\245\25\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\15\10\1\246\20\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\1\247\35\10\6\0\2\10\1\0"+
    "\2\10\2\0\4\10\1\250\10\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\15\10\10\0\14\10\1\250"+
    "\21\10\6\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\7\10\1\251\26\10\6\0\2\10\1\0\2\10\2\0"+
    "\15\10\10\0\12\10\1\252\23\10\6\0\2\10\1\0"+
    "\2\10\2\0\2\10\1\253\12\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\14\10\1\254\10\0\36\10"+
    "\6\0\2\10\1\0\2\10\2\0\1\10\1\255\13\10"+
    "\10\0\36\10\6\0\2\10\1\0\2\10\2\0\2\10"+
    "\1\256\12\10\10\0\36\10\6\0\2\10\1\0\2\10"+
    "\2\0\5\10\1\257\7\10\10\0\36\10\6\0\2\10"+
    "\1\0\2\10\2\0\1\10\1\260\13\10\10\0\36\10"+
    "\6\0\2\10\1\0\2\10\2\0\1\10\1\261\13\10"+
    "\10\0\36\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\12\10\1\262\23\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\11\10\1\263\24\10\6\0\2\10"+
    "\1\0\2\10\2\0\2\10\1\264\12\10\10\0\36\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\14\10"+
    "\1\265\21\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\15\10\1\266\20\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\11\10\1\267\24\10\6\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\11\10\1\261\24\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\7\10"+
    "\1\270\26\10\6\0\2\10\1\0\2\10\2\0\15\10"+
    "\10\0\10\10\1\271\25\10\6\0\2\10\1\0\2\10"+
    "\2\0\3\10\1\272\11\10\10\0\36\10\6\0\2\10"+
    "\1\0\2\10\2\0\3\10\1\273\11\10\10\0\36\10"+
    "\6\0\2\10\1\0\2\10\2\0\14\10\1\274\10\0"+
    "\36\10\6\0\2\10\1\0\2\10\2\0\4\10\1\275"+
    "\10\10\10\0\36\10\6\0\2\10\1\0\2\10\2\0"+
    "\15\10\10\0\30\10\1\276\5\10\6\0\2\10\1\0"+
    "\2\10\2\0\3\10\1\277\11\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\15\10\10\0\10\10\1\300"+
    "\25\10\6\0\2\10\1\0\2\10\2\0\1\10\1\301"+
    "\13\10\10\0\36\10\6\0\2\10\1\0\2\10\2\0"+
    "\15\10\10\0\10\10\1\302\25\10\6\0\2\10\1\0"+
    "\2\10\2\0\15\10\10\0\11\10\1\301\24\10\6\0"+
    "\2\10\1\0\2\10\2\0\15\10\10\0\31\10\1\276"+
    "\4\10\6\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\10\10\1\303\25\10\6\0\2\10\1\0\2\10\2\0"+
    "\15\10\10\0\11\10\1\304\24\10\6\0\2\10\1\0"+
    "\2\10\2\0\1\10\1\304\13\10\10\0\36\10\6\0"+
    "\2\10\1\0\2\10\2\0\15\10\10\0\4\10\1\305"+
    "\31\10\6\0\2\10\1\0\2\10\2\0\1\10\1\306"+
    "\13\10\10\0\36\10\6\0\2\10\1\0\2\10\2\0"+
    "\15\10\10\0\16\10\1\307\17\10\6\0\2\10\1\0"+
    "\2\10\2\0\15\10\10\0\17\10\1\310\16\10\6\0"+
    "\2\10\1\0\2\10\2\0\15\10\10\0\11\10\1\306"+
    "\24\10\6\0\2\10\1\0\2\10\2\0\15\10\10\0"+
    "\34\10\1\311\1\10\6\0\2\10\1\0\2\10\2\0"+
    "\14\10\1\312\10\0\36\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\34\10\1\313\1\10\6\0\2\10"+
    "\1\0\2\10\2\0\15\10\10\0\22\10\1\314\13\10"+
    "\6\0\2\10\1\0\2\10\2\0\15\10\10\0\21\10"+
    "\1\315\14\10\6\0\2\10\1\0\2\10\2\0\4\10"+
    "\1\316\10\10\10\0\36\10\6\0\2\10\1\0\2\10"+
    "\2\0\15\10\10\0\14\10\1\316\21\10\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10560];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\17\1\2\11\2\1\3\11\15\1\2\11"+
    "\3\1\1\11\24\1\2\11\21\1\1\11\1\1\1\11"+
    "\170\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[206];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */
  StringBuffer string = new StringBuffer(128);

  private Symbol newToken(short id)
  {
	return new Symbol(id, yyline + 1, yycolumn + 1, yylength(), yytext());
  }

  private Symbol newToken(short id, Object value)
  {
	return new Symbol(id, yyline + 1, yycolumn + 1, yylength(), value);
  }



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  SupersqlScanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  SupersqlScanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1792) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Symbol nextToken() throws java.io.IOException, Scanner.Exception {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 2: 
          { /* ignore */
          }
        case 49: break;
        case 20: 
          { return newToken(Terminals.GE);
          }
        case 50: break;
        case 43: 
          { return newToken(Terminals.DEFAULT);
          }
        case 51: break;
        case 19: 
          { return newToken(Terminals.LE);
          }
        case 52: break;
        case 16: 
          { yybegin(YYINITIAL); return newToken(Terminals.STRING_LITERAL, string.toString());
          }
        case 53: break;
        case 6: 
          { return newToken(Terminals.LPAREN);
          }
        case 54: break;
        case 38: 
          { return newToken(Terminals.FLOAT);
          }
        case 55: break;
        case 22: 
          { return newToken(Terminals.IS);
          }
        case 56: break;
        case 5: 
          { return newToken(Terminals.MINUS);
          }
        case 57: break;
        case 48: 
          { return newToken(Terminals.CONSTRAINT);
          }
        case 58: break;
        case 9: 
          { return newToken(Terminals.GT);
          }
        case 59: break;
        case 37: 
          { return newToken(Terminals.TABLE);
          }
        case 60: break;
        case 8: 
          { return newToken(Terminals.LT);
          }
        case 61: break;
        case 33: 
          { return newToken(Terminals.NULL);
          }
        case 62: break;
        case 31: 
          { return newToken(Terminals.LONG);
          }
        case 63: break;
        case 39: 
          { return newToken(Terminals.CREATE);
          }
        case 64: break;
        case 4: 
          { return newToken(Terminals.IDENT,new String(yytext()));
          }
        case 65: break;
        case 13: 
          { return newToken(Terminals.COMMA);
          }
        case 66: break;
        case 41: 
          { return newToken(Terminals.NUMBER);
          }
        case 67: break;
        case 29: 
          { return newToken(Terminals.CLOB);
          }
        case 68: break;
        case 47: 
          { return newToken(Terminals.TIMESTAMP);
          }
        case 69: break;
        case 17: 
          { return newToken(Terminals.FLOATING_POINT_LITERAL, Float.valueOf(yytext()));
          }
        case 70: break;
        case 40: 
          { return newToken(Terminals.COLUMN);
          }
        case 71: break;
        case 7: 
          { return newToken(Terminals.RPAREN);
          }
        case 72: break;
        case 36: 
          { return newToken(Terminals.ALTER);
          }
        case 73: break;
        case 35: 
          { return newToken(Terminals.CHECK);
          }
        case 74: break;
        case 3: 
          { return newToken(Terminals.INTEGER_LITERAL, new Integer(yytext()));
          }
        case 75: break;
        case 24: 
          { return newToken(Terminals.ADD);
          }
        case 76: break;
        case 10: 
          { return newToken(Terminals.PLUS);
          }
        case 77: break;
        case 44: 
          { return newToken(Terminals.PRIMARY);
          }
        case 78: break;
        case 46: 
          { return newToken(Terminals.NVARCHAR);
          }
        case 79: break;
        case 45: 
          { return newToken(Terminals.VARCHAR);
          }
        case 80: break;
        case 34: 
          { return newToken(Terminals.DATE);
          }
        case 81: break;
        case 27: 
          { return newToken(Terminals.INT);
          }
        case 82: break;
        case 32: 
          { return newToken(Terminals.DROP);
          }
        case 83: break;
        case 14: 
          { yybegin(STRING); string.setLength(0);
          }
        case 84: break;
        case 42: 
          { return newToken(Terminals.BETWEEN);
          }
        case 85: break;
        case 18: 
          { return newToken(Terminals.OR);
          }
        case 86: break;
        case 21: 
          { return newToken(Terminals.IN);
          }
        case 87: break;
        case 26: 
          { return newToken(Terminals.NOT);
          }
        case 88: break;
        case 25: 
          { return newToken(Terminals.AND);
          }
        case 89: break;
        case 11: 
          { return newToken(Terminals.DIV);
          }
        case 90: break;
        case 23: 
          { throw new Scanner.Exception(yyline + 1, yycolumn + 1, "Illegal escape sequence \""+yytext()+"\"");
          }
        case 91: break;
        case 12: 
          { return newToken(Terminals.MULT);
          }
        case 92: break;
        case 28: 
          { return newToken(Terminals.KEY);
          }
        case 93: break;
        case 15: 
          { string.append( yytext() );
          }
        case 94: break;
        case 1: 
          { throw new Scanner.Exception("unexpected character '" + yytext() + "'");
          }
        case 95: break;
        case 30: 
          { return newToken(Terminals.CHAR);
          }
        case 96: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	return newToken(Terminals.EOF, "end-of-file");
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}

package supersql;

import java.util.ArrayList;
import supersql.ast.*;
import supersql.ast.types.*;
import beaver.*;
import supersql.ast.entities.predicate.*;
import supersql.ast.actions.*;
import supersql.ast.entities.expr.*;
import supersql.ast.changes.*;
import supersql.ast.entities.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "supersql.grammar".
 */
public class SupersqlParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDbcbm5KKKXSzaaZmXP8F4c8GaX90GGaZ2uoKl2PAG4514SG5n1HGN5ZT0N4501LGmBWZ" +
		"YGgbbbLNYJyigIuE0k01kWCg#YeAWWgA0A69xkdFVPEOnIFdFcVhwtZvzk$jEJyy2M7Mu3P" +
		"DnD#x733oCAeHGZLhSWbin2TDHfqugvQYn2A8HJHY4yoEQ#XiZNQgD63o21FH0F08u2#sGJ" +
		"2qEfIXHxpXQ7Hv51sVK2r269DIZl$4I7I$7yQutNWFEnHZZTNBwQgqrhgD7IpDQgaTBqPhw" +
		"rQDb6ssFHnlkp9PkMdTxMgymhGiysaAZdUtHienMu6XPk0aNuofSZI78m3KOZH6u5EVWPep" +
		"5C5pawgEzSMRcBvnL$XoTKQ5N4OznxTeRJ$CadiKpr1wdbejCZ4S#kk16diNeoR8tUg7Sp3" +
		"e2Lt8Tv#DvvAaj6ACECxUkw8OY5E8fB49tz44bmgX1N$J300p4UHYC2vdRK5o2ot2v#aRjm" +
		"hKOXUjm0wzb0cx77PY8Ep45T#4Ut8lxC1NJy01cua4yX5cOZJcOnxlp17cQvF0UFSThV07D" +
		"U17wcCjSyvb50VCeT7P72JClPTwsYOceyLpV3AvN9aU8QE1EQrChkLesvx2vsdsvXlsu9bf" +
		"Bu5uRu6WsryDoHh2uNyFSrt76Yt4yo$5I72$TU4cUlgrnvJwQxT7w#sZjJwjfB#S$zSZroS" +
		"2TQHftWjQAs5hCfxEQzxbLIURJwBtYvAXPR4RQPXLJUQMTZAV9vfuCKykZLi#81kwW49$MC" +
		"kxK2iVgiVHiAMPzWunB9qcCjBZd6lcy9r8lypbZpBj3dtMcr5gGuwHn7dsdx3EK5izo8LBs" +
		"vcosui5z0YoUQROOFYOf99ci8tbQTyCZWzIIWMGqAIH3o0HNp7WoaSmXRvCto1voZ4mX7vB" +
		"Zd7mtRGDvHVeT4dkIR6xrBOj5FUakRKta4pAOh2L3oNffIo33o70oaemYOyauCebC9bF9D3" +
		"ARLFbStrmoZomW2ybBv6NoEbb2vZEd3hHlqYPAZabYasMCwVHrFPL5Cpb8lwDhZfKadQmYg" +
		"ydUjZQhdSJeeyMRcnKVLSyYcIJRfUMGpYHNwbr87icNUW7fIhgv#XGHtaTBrjZgGOf9ITHy" +
		"FKalEX$Gbf8ooVK8$Gg92R9O97uV5aTfAwLUHSAHyNZ$3xly4#wv$E2H83PqXhZcgFghObz" +
		"3wnv$I#fhN37BN7wBorygThdO5L5ZRnIxIQpiMsmHkrNijjFakbti3h4xnUwAYflbrz$Lli" +
		"4lVwdl5tj0xBv$6okwt$y5$Ivm#RRakCIbHJyV0TUrBEOkEwuTNQg$r0drf$e3daFzeWx2z" +
		"r1RrNVg9$AZgUqLzLjFp6UcvFvIxvCLP3bPPjJtr5BLejwbzn7X#q$n6L8hjMBQFoLygwar" +
		"dX5tgXtYhMO6gzHsUjjCVR$wNkrJFwW3QhFQ934RrGRnlXRxbTWlrNhnrebTgtvMXrmp$Mx" +
		"AOwOyAjeHK$x6OX3$6oppLr55MtaAuFz4FFyhD07#NSIJ0BynblbYrlBhMKijp7hO$7V4aZ" +
		"Y#rIqIOxvY4K9i3t6yHiRexx7#ujNGrj1Mqsg21lqD1Vyd0lo2M4AioyQUKg$W66t4HM7xK" +
		"kQBvT3q3#N9fa4=");

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

    ScriptSemantics sema;

    protected void recoverFromError(beaver.Symbol token, beaver.Parser.TokenStream in) throws java.io.IOException, beaver.Parser.Exception
    {
         try {
          super.recoverFromError(token,in);
         } catch (beaver.Parser.Exception e) {
             SuperSqlEvents.getInstance().recoverFailed(e);
             throw e;
         }
    }

	private final Action[] actions;

	public SupersqlParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] script = command_seq.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final ScriptActions s = (ScriptActions) _symbol_s.value;
					 sema.addActions(s); return sema;
				}
			},
			new Action() {	// [1] command_seq = command.c DIV command_seq.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ScriptAction c = (ScriptAction) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final ScriptActions s = (ScriptActions) _symbol_s.value;
					 ScriptActions res = ScriptActions.create(c); res.addScriptActions(s); return res;
				}
			},
			new Action() {	// [2] command_seq = command.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ScriptAction c = (ScriptAction) _symbol_c.value;
					  return ScriptActions.create(c);
				}
			},
			new Action() {	// [3] command = create_table.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ScriptAction c = (ScriptAction) _symbol_c.value;
					  return c;
				}
			},
			Action.RETURN,	// [4] command = add_column
			Action.RETURN,	// [5] command = drop_column
			Action.RETURN,	// [6] command = modify_column
			new Action() {	// [7] command = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new VoidAction();
				}
			},
			new Action() {	// [8] modify_column = ALTER TABLE IDENT.t MODIFY COLUMN column_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final ColumnDefinition c = (ColumnDefinition) _symbol_c.value;
					 return new ModifyColumnTypeAction(t, c);
				}
			},
			new Action() {	// [9] add_column = ALTER TABLE IDENT.t ADD COLUMN column_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final ColumnDefinition c = (ColumnDefinition) _symbol_c.value;
					 return new AddColumnsAction(t, ColumnDefinitions.create(c).getColumnDefinitions());
				}
			},
			new Action() {	// [10] add_column = ALTER TABLE IDENT.t ADD LPAREN columns_def.d RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final ColumnDefinitions d = (ColumnDefinitions) _symbol_d.value;
					 return new AddColumnsAction(t, d.getColumnDefinitions());
				}
			},
			new Action() {	// [11] drop_column = ALTER TABLE IDENT.t DROP COLUMN IDENT.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final String c = (String) _symbol_c.value;
					 return new DeleteColumnsAction(t, Columns.create(c).getColumns());
				}
			},
			new Action() {	// [12] drop_column = ALTER TABLE IDENT.t DROP LPAREN columns_list.d RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final Columns d = (Columns) _symbol_d.value;
					 return new DeleteColumnsAction(t, d.getColumns());
				}
			},
			new Action() {	// [13] columns_list = IDENT.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					 return Columns.create(new Column(c));
				}
			},
			new Action() {	// [14] columns_list = IDENT.d COMMA columns_list.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final String d = (String) _symbol_d.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final Columns l = (Columns) _symbol_l.value;
					 Columns s = Columns.create(new Column(d)); s.addColumns(l); return s;
				}
			},
			new Action() {	// [15] create_table = CREATE TABLE IDENT.i LPAREN columns_def.d COMMA constraint_def.c RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final ColumnDefinitions d = (ColumnDefinitions) _symbol_d.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final PrimaryKeyConstraint c = (PrimaryKeyConstraint) _symbol_c.value;
					 return new CreateTableAction(i,d.getColumnDefinitions(), c);
				}
			},
			new Action() {	// [16] create_table = CREATE TABLE IDENT.i LPAREN columns_def.d RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final ColumnDefinitions d = (ColumnDefinitions) _symbol_d.value;
					 return new CreateTableAction(i,d.getColumnDefinitions());
				}
			},
			new Action() {	// [17] columns_def = column_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ColumnDefinition c = (ColumnDefinition) _symbol_c.value;
					 return ColumnDefinitions.create(c);
				}
			},
			new Action() {	// [18] columns_def = columns_def.d COMMA column_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final ColumnDefinitions d = (ColumnDefinitions) _symbol_d.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final ColumnDefinition c = (ColumnDefinition) _symbol_c.value;
					 d.addColumnDef(c); return d;
				}
			},
			new Action() {	// [19] column_def = IDENT.i type_and_default_value.t null_value.m column_constraint_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeAndDefaultValue t = (TypeAndDefaultValue) _symbol_t.value;
					final Symbol _symbol_m = _symbols[offset + 3];
					final MandatorySymbol m = (MandatorySymbol) _symbol_m.value;
					final Symbol _symbol_c = _symbols[offset + 4];
					final ColumnConstraintDefinition c = (ColumnConstraintDefinition) _symbol_c.value;
					 return new ColumnDefinition(i, t.getTypeDefinition(), t.getDefaultValue(), m.isMandatory(), c) ;
				}
			},
			new Action() {	// [20] column_def = IDENT.i type_and_default_value.t null_value.m default_value column_constraint_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeAndDefaultValue t = (TypeAndDefaultValue) _symbol_t.value;
					final Symbol _symbol_m = _symbols[offset + 3];
					final MandatorySymbol m = (MandatorySymbol) _symbol_m.value;
					final Symbol _symbol_c = _symbols[offset + 5];
					final ColumnConstraintDefinition c = (ColumnConstraintDefinition) _symbol_c.value;
					 return new ColumnDefinition(i, t.getTypeDefinition(), t.getDefaultValue(), m.isMandatory(), c) ;
				}
			},
			new Action() {	// [21] type_and_default_value = type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeDefinition t = (TypeDefinition) _symbol_t.value;
					 return new TypeAndDefaultValue(t);
				}
			},
			new Action() {	// [22] type_and_default_value = type.t default_value.d
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeDefinition t = (TypeDefinition) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 2];
					final Expr d = (Expr) _symbol_d.value;
					 return new TypeAndDefaultValue(t,d);
				}
			},
			new Action() {	// [23] default_value = DEFAULT INTEGER_LITERAL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 2];
					final Integer n = (Integer) _symbol_n.value;
					 return new IntExpr(n);
				}
			},
			new Action() {	// [24] default_value = DEFAULT FLOATING_POINT_LITERAL.f
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_f = _symbols[offset + 2];
					final Float f = (Float) _symbol_f.value;
					 return new DoubleExpr(f);
				}
			},
			new Action() {	// [25] default_value = DEFAULT STRING_LITERAL.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 2];
					final String s = (String) _symbol_s.value;
					 return new StringExpr(s);
				}
			},
			new Action() {	// [26] column_constraint_def = CONSTRAINT IDENT.c column_constraint_body.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 2];
					final String c = (String) _symbol_c.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Predicate b = (Predicate) _symbol_b.value;
					 return new ColumnConstraintDefinition(c,b);
				}
			},
			Action.NONE,  	// [27] column_constraint_def = 
			new Action() {	// [28] column_constraint_body = CHECK LPAREN predicate.p RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 3];
					final Predicate p = (Predicate) _symbol_p.value;
					 return p;
				}
			},
			new Action() {	// [29] string_list = STRING_LITERAL.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					 return new StringList(s);
				}
			},
			new Action() {	// [30] string_list = STRING_LITERAL.s COMMA string_list.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final String s = (String) _symbol_s.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final StringList l = (StringList) _symbol_l.value;
					 return new StringList(s).append(l);
				}
			},
			Action.RETURN,	// [31] value_list = value.v
			new Action() {	// [32] value_list = value.v COMMA value_list.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_v = _symbols[offset + 1];
					final Expr v = (Expr) _symbol_v.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final ValueList l = (ValueList) _symbol_l.value;
					 return l.prepend(v) ;
				}
			},
			new Action() {	// [33] value = INTEGER_LITERAL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new IntExpr(n);
				}
			},
			new Action() {	// [34] value = FLOATING_POINT_LITERAL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Float n = (Float) _symbol_n.value;
					 return new DoubleExpr(n);
				}
			},
			new Action() {	// [35] null_value = NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new MandatorySymbol(false);
				}
			},
			new Action() {	// [36] null_value = NOT NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new MandatorySymbol(true);
				}
			},
			new Action() {	// [37] null_value = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new MandatorySymbol(false);
				}
			},
			new Action() {	// [38] constraint_def = CONSTRAINT IDENT.c PRIMARY KEY LPAREN columns_list.l RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 2];
					final String c = (String) _symbol_c.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Columns l = (Columns) _symbol_l.value;
					 return new PrimaryKeyConstraint(c,l);
				}
			},
			new Action() {	// [39] type = INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeDefinition(Type.INT);
				}
			},
			new Action() {	// [40] type = CLOB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeDefinition(Type.CLOB);
				}
			},
			new Action() {	// [41] type = TIMESTAMP LPAREN INTEGER_LITERAL.i RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 3];
					final Integer i = (Integer) _symbol_i.value;
					 return new TimestampTypeDefinition(i);
				}
			},
			new Action() {	// [42] type = DATE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new DateTypeDefinition();
				}
			},
			new Action() {	// [43] type = CHAR LPAREN INTEGER_LITERAL RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeDefinition(Type.CHAR);
				}
			},
			new Action() {	// [44] type = NUMBER LPAREN INTEGER_LITERAL.i RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 3];
					final Integer i = (Integer) _symbol_i.value;
					 return new NumberTypeDefinition(i);
				}
			},
			new Action() {	// [45] type = LONG LPAREN INTEGER_LITERAL.n RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final Integer n = (Integer) _symbol_n.value;
					 return new VarcharTypeDefinition(n);
				}
			},
			new Action() {	// [46] type = FLOAT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeDefinition(Type.FLOAT);
				}
			},
			new Action() {	// [47] type = VARCHAR LPAREN INTEGER_LITERAL.n RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final Integer n = (Integer) _symbol_n.value;
					 return new VarcharTypeDefinition(n);
				}
			},
			new Action() {	// [48] type = NVARCHAR LPAREN INTEGER_LITERAL.n RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final Integer n = (Integer) _symbol_n.value;
					 return new NVarcharTypeDefinition(n);
				}
			},
			RETURN3,	// [49] predicate = predicate OR predicate; returns 'predicate' although none is marked
			RETURN3,	// [50] predicate = predicate AND predicate; returns 'predicate' although none is marked
			new Action() {	// [51] predicate = LPAREN predicate.p RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_p = _symbols[offset + 2];
					final Predicate p = (Predicate) _symbol_p.value;
					 return new EnclosedPredicate(p);
				}
			},
			new Action() {	// [52] predicate = IDENT.i IN LPAREN string_list.l RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final StringList l = (StringList) _symbol_l.value;
					 return new InListPredicate(i,l);
				}
			},
			new Action() {	// [53] predicate = IDENT.i IN LPAREN columns_list.l RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final Columns l = (Columns) _symbol_l.value;
					 return new InListPredicate(i,l);
				}
			},
			new Action() {	// [54] predicate = IDENT.i IN LPAREN value_list.l RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_l = _symbols[offset + 4];
					final ValueList l = (ValueList) _symbol_l.value;
					 return new InListPredicate(i,l);
				}
			},
			new Action() {	// [55] predicate = IDENT.i BETWEEN expr.a AND expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 5];
					final Expr b = (Expr) _symbol_b.value;
					 return new BetweenPredicate(i,a,b);
				}
			},
			new Action() {	// [56] predicate = IDENT.i IS null_value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 return new IsNullPredicate(i);
				}
			},
			new Action() {	// [57] predicate = expr.a LT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new ComparisonPredicate(a,b,ComparisonPredicate.OP.LT);
				}
			},
			new Action() {	// [58] predicate = expr.a GT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new ComparisonPredicate(a,b,ComparisonPredicate.OP.GT);
				}
			},
			new Action() {	// [59] predicate = expr.a GE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new ComparisonPredicate(a,b,ComparisonPredicate.OP.GE);
				}
			},
			new Action() {	// [60] predicate = expr.a LE expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new ComparisonPredicate(a,b,ComparisonPredicate.OP.LE);
				}
			},
			new Action() {	// [61] predicate = expr.a EQ expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new ComparisonPredicate(a,b,ComparisonPredicate.OP.EQ);
				}
			},
			new Action() {	// [62] expr = expr.a MULT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new BinaryExpr(a,'*',b);
				}
			},
			new Action() {	// [63] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new BinaryExpr(a,'/',b);
				}
			},
			new Action() {	// [64] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new BinaryExpr(a,'+',b);
				}
			},
			new Action() {	// [65] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new BinaryExpr(a,'-',b);
				}
			},
			new Action() {	// [66] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return new EnclosedExpr(e);
				}
			},
			new Action() {	// [67] expr = INTEGER_LITERAL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new IntExpr(n);
				}
			},
			new Action() {	// [68] expr = FLOATING_POINT_LITERAL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Float n = (Float) _symbol_n.value;
					 return new DoubleExpr(n);
				}
			},
			new Action() {	// [69] expr = IDENT.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 return new VarExpr(i);
				}
			}
		};


    this.sema = new ScriptSemantics();
    this.report = SuperSqlEvents.getInstance();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}

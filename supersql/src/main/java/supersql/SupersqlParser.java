package supersql;

import java.util.ArrayList;
import supersql.ast.*;
import supersql.ast.types.*;
import beaver.*;
import supersql.ast.actions.*;
import supersql.ast.changes.*;
import supersql.ast.entities.*;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "supersql.grammar".
 */
public class SupersqlParser extends Parser {

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9ozbcTm5LKKn$$xDiK06a928264I0eXfl98u2KGcYAeMC0k4B60YWhOfIXgB22YekCt7J#" +
		"9CtxI6SSk88e5eo4a50iYgDX0K4IbUFtVa$CskpilyCtT#TtpttFkkNVVBNiVu5IZ0TDm4Q" +
		"AeGIr6nAqnk1mtO1vknPrOZ2gCmJXCm1cu3jVZPYpowjyF5n6acMFcNwGW5IUX1vAwwfjt6" +
		"4z6Jzo7F8qtu6GizVBFn6au1QCmMbGVJ$NoL8QeHiJObrLfNgxrfLkVEHZmvKgzl81leFYk" +
		"2lWo9VVxWEy2hxU#4jqTY5ueqUK1twFYwntmPOals$Fbu1pCnCMu18zmjCz5a#YpSBxKpl7" +
		"wV4XKYJSBRPXfDc4eXg228zWaoh9CoacOXKjHZEcu5hEfPw4KPQZ4uoZ773o85UY7$kOhjZ" +
		"y0#UOF560GJiLZACHW5A4Qmp0STHY9Uep5U9oEYPZCDpeRKt0Uffhlp2vSXYim0rVYQip5D" +
		"PYF6t4JRiC2t8AxS3lkm1BSZOLu6FVWNZHpnEsTWPNiyGa0Jv87EF$3#LiwvpxDi#2QoEVx" +
		"5F2D1dEii#sxCg#KlwoCinwlbywH6CPrOQywZkH8ZdIAh$vOYJiS7qVZBaVFzV8Thawx8fD" +
		"5PNegugaAJwMBwXF87IM#nEtvVVNY6ntmESV9ZN15TXSziIzFV16VhugxgDDdHpjBT8mxhU" +
		"izhCe8jUKoo#LCz69PmIohB54f2xcEYhcUXaXMEUzAtkLifv8jvt9LLJ7FbTwhQJEvjntsK" +
		"SJT7v7wuJl2F5Vkc9JMLyrtQ6IaHER4JL1MIEdeNI5b5RzGBkdDTR5ggImFqJr98Pb8Ygm$" +
		"3g$#f8PC9dF9218bp$lgB2OhoJpo4bbBVYLxIHFPJmuOOtwZVO7iqhn3f4FrFwIHRD3d2MG" +
		"ZcKHQo1JIQcDivnZDL3ADJ2Spo6moXymd2yX2ieWqarh$RzBsbv7bv2doD7cMF4TManV9cu" +
		"2JHFioRN9dZfEYDbNRM48Eyzdkp1NaDUeUlZxUjPN9Ul8#MTSLSrojqvViKxqZ$9vQDuDmD" +
		"pjPFbycOQxJJv#p2UVAoTNd73A03FJbv95yKX1gVn2nyzz6NgKkKdynYsTKbx3OGrkgpqD9" +
		"MRmDExS#RHBz3j#uw3YYy0JrreIUrwkDeNDCt$B5$FeLdtvTxHjgtmwrsQfsazesjPlLjgl" +
		"jwEOTjwZTgdQRsksXUis9ydtnjhZcyBM4Ol7zibljpcxQQ3zU7$ytl0wgNUtp7GdLEUhJg$" +
		"ZhxNT0IdFK73674RZCx$8DIN2PhyqUiq$KZ#hv8H1lbV8JyW7XRZHSGUOzyQupQyqQmzrgF" +
		"YOVaG$91kkH#EVaCz8IQF5RirFLf#nze$c6QWVPQ$ZjCx#OdyrFvalpXTRPRhQfsgfsYzeE" +
		"qwvgipbWzljw#5lAl$Jfa9H$iXZF4zpX2UxAALuJm7wXKqWgJ$KKaifpnf4pfuwdLnrzKJv" +
		"7zOIefwxdYT7eeu6n1hOpXl4Ou$RKgQMjbNybZb0jH0XusgVo37UK99zD2ZnNCh#Bv11kGi" +
		"eJudYC#m$4S9Ff");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

    ScriptSemantics sema;

    protected void recoverFromError(beaver.Symbol token, beaver.Parser.TokenStream in) throws java.io.IOException, beaver.Parser.Exception
    {
         try {
          super.recoverFromError(token,in);
         } catch (beaver.Parser.Exception e) {
             SuperSqlEvents.getInstance().recoverFailed(e);
             throw e;
         }
    }

	private final Action[] actions;

	public SupersqlParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] script = command_seq.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_s = _symbols[offset + 1];
					final ScriptActions s = (ScriptActions) _symbol_s.value;
					 sema.addActions(s); return sema;
				}
			},
			new Action() {	// [1] command_seq = command.c DIV command_seq.s
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ScriptAction c = (ScriptAction) _symbol_c.value;
					final Symbol _symbol_s = _symbols[offset + 3];
					final ScriptActions s = (ScriptActions) _symbol_s.value;
					 ScriptActions res = ScriptActions.create(c); res.addScriptActions(s); return res;
				}
			},
			new Action() {	// [2] command_seq = command.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ScriptAction c = (ScriptAction) _symbol_c.value;
					  return ScriptActions.create(c);
				}
			},
			new Action() {	// [3] command = create_table.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ScriptAction c = (ScriptAction) _symbol_c.value;
					  return c;
				}
			},
			Action.RETURN,	// [4] command = add_column
			Action.RETURN,	// [5] command = drop_column
			new Action() {	// [6] command = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new VoidAction();
				}
			},
			new Action() {	// [7] add_column = ALTER TABLE IDENT.t ADD COLUMN column_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final ColumnDefinition c = (ColumnDefinition) _symbol_c.value;
					 return new AddColumnsAction(t, ColumnDefinitions.create(c).getColumnDefinitions());
				}
			},
			new Action() {	// [8] add_column = ALTER TABLE IDENT.t ADD LPAREN columns_def.d RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final ColumnDefinitions d = (ColumnDefinitions) _symbol_d.value;
					 return new AddColumnsAction(t, d.getColumnDefinitions());
				}
			},
			new Action() {	// [9] drop_column = ALTER TABLE IDENT.t DROP COLUMN IDENT.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_c = _symbols[offset + 6];
					final String c = (String) _symbol_c.value;
					 return new DeleteColumnsAction(t, Columns.create(c).getColumns());
				}
			},
			new Action() {	// [10] drop_column = ALTER TABLE IDENT.t DROP LPAREN columns_list.d RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 3];
					final String t = (String) _symbol_t.value;
					final Symbol _symbol_d = _symbols[offset + 6];
					final Columns d = (Columns) _symbol_d.value;
					 return new DeleteColumnsAction(t, d.getColumns());
				}
			},
			new Action() {	// [11] columns_list = IDENT.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final String c = (String) _symbol_c.value;
					 return Columns.create(new Column(c));
				}
			},
			new Action() {	// [12] columns_list = IDENT.d COMMA columns_list.l
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final String d = (String) _symbol_d.value;
					final Symbol _symbol_l = _symbols[offset + 3];
					final Columns l = (Columns) _symbol_l.value;
					 Columns s = Columns.create(new Column(d)); s.addColumns(l); return s;
				}
			},
			new Action() {	// [13] create_table = CREATE TABLE IDENT.i LPAREN columns_def.d COMMA constraint_def.c RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final ColumnDefinitions d = (ColumnDefinitions) _symbol_d.value;
					final Symbol _symbol_c = _symbols[offset + 7];
					final PrimaryKeyConstraint c = (PrimaryKeyConstraint) _symbol_c.value;
					 return new CreateTableAction(i,d.getColumnDefinitions(), c);
				}
			},
			new Action() {	// [14] create_table = CREATE TABLE IDENT.i LPAREN columns_def.d RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 3];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_d = _symbols[offset + 5];
					final ColumnDefinitions d = (ColumnDefinitions) _symbol_d.value;
					 return new CreateTableAction(i,d.getColumnDefinitions());
				}
			},
			new Action() {	// [15] columns_def = column_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 1];
					final ColumnDefinition c = (ColumnDefinition) _symbol_c.value;
					 return ColumnDefinitions.create(c);
				}
			},
			new Action() {	// [16] columns_def = columns_def.d COMMA column_def.c
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_d = _symbols[offset + 1];
					final ColumnDefinitions d = (ColumnDefinitions) _symbol_d.value;
					final Symbol _symbol_c = _symbols[offset + 3];
					final ColumnDefinition c = (ColumnDefinition) _symbol_c.value;
					 d.addColumnDef(c); return d;
				}
			},
			new Action() {	// [17] column_def = IDENT.i type_and_default_value.t null_value.m column_constraint_def
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					final Symbol _symbol_t = _symbols[offset + 2];
					final TypeDefinition t = (TypeDefinition) _symbol_t.value;
					final Symbol _symbol_m = _symbols[offset + 3];
					final MandatorySymbol m = (MandatorySymbol) _symbol_m.value;
					 return new ColumnDefinition(i, t, false, m.isMandatory()) ;
				}
			},
			new Action() {	// [18] type_and_default_value = type.t
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeDefinition t = (TypeDefinition) _symbol_t.value;
					 return t;
				}
			},
			new Action() {	// [19] type_and_default_value = type.t default_value
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_t = _symbols[offset + 1];
					final TypeDefinition t = (TypeDefinition) _symbol_t.value;
					 return t;
				}
			},
			RETURN2,	// [20] default_value = DEFAULT INTEGER_LITERAL; returns 'INTEGER_LITERAL' although none is marked
			RETURN2,	// [21] default_value = DEFAULT FLOATING_POINT_LITERAL; returns 'FLOATING_POINT_LITERAL' although none is marked
			RETURN2,	// [22] default_value = DEFAULT STRING_LITERAL; returns 'STRING_LITERAL' although none is marked
			RETURN2,	// [23] column_constraint_def = CONSTRAINT IDENT.c column_constraint_body
			Action.NONE,  	// [24] column_constraint_def = 
			RETURN4,	// [25] column_constraint_body = CHECK LPAREN expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [26] string_list = STRING_LITERAL
			RETURN3,	// [27] string_list = STRING_LITERAL COMMA string_list.l
			Action.RETURN,	// [28] value_list = value
			RETURN3,	// [29] value_list = value COMMA value_list; returns 'value_list' although none is marked
			Action.RETURN,	// [30] value = INTEGER_LITERAL
			Action.RETURN,	// [31] value = FLOATING_POINT_LITERAL
			new Action() {	// [32] null_value = NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new MandatorySymbol(false);
				}
			},
			new Action() {	// [33] null_value = NOT NULL
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new MandatorySymbol(true);
				}
			},
			new Action() {	// [34] null_value = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new MandatorySymbol(false);
				}
			},
			new Action() {	// [35] constraint_def = CONSTRAINT IDENT.c PRIMARY KEY LPAREN columns_list.l RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_c = _symbols[offset + 2];
					final String c = (String) _symbol_c.value;
					final Symbol _symbol_l = _symbols[offset + 6];
					final Columns l = (Columns) _symbol_l.value;
					 return new PrimaryKeyConstraint(c,l);
				}
			},
			new Action() {	// [36] type = INT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeDefinition(Type.INT);
				}
			},
			new Action() {	// [37] type = CLOB
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeDefinition(Type.CLOB);
				}
			},
			new Action() {	// [38] type = TIMESTAMP LPAREN INTEGER_LITERAL.i RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 3];
					final Integer i = (Integer) _symbol_i.value;
					 return new TimestampTypeDefinition(i);
				}
			},
			new Action() {	// [39] type = DATE
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new DateTypeDefinition();
				}
			},
			new Action() {	// [40] type = CHAR LPAREN INTEGER_LITERAL RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeDefinition(Type.CHAR);
				}
			},
			new Action() {	// [41] type = NUMBER LPAREN INTEGER_LITERAL.i RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 3];
					final Integer i = (Integer) _symbol_i.value;
					 return new NumberTypeDefinition(i);
				}
			},
			new Action() {	// [42] type = LONG LPAREN INTEGER_LITERAL.n RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final Integer n = (Integer) _symbol_n.value;
					 return new VarcharTypeDefinition(n);
				}
			},
			new Action() {	// [43] type = FLOAT
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new TypeDefinition(Type.FLOAT);
				}
			},
			new Action() {	// [44] type = VARCHAR LPAREN INTEGER_LITERAL.n RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 3];
					final Integer n = (Integer) _symbol_n.value;
					 return new VarcharTypeDefinition(n);
				}
			},
			RETURN3,	// [45] expression = expression OR expression; returns 'expression' although none is marked
			RETURN3,	// [46] expression = expression AND expression; returns 'expression' although none is marked
			RETURN3,	// [47] expression = LPAREN expression RPAREN; returns 'RPAREN' although none is marked
			Action.RETURN,	// [48] expression = IDENT.i IN LPAREN string_list RPAREN
			Action.RETURN,	// [49] expression = IDENT.i IN LPAREN columns_list RPAREN
			Action.RETURN,	// [50] expression = IDENT.i IN LPAREN value_list RPAREN
			Action.RETURN,	// [51] expression = IDENT.i BETWEEN expr AND expr
			Action.RETURN,	// [52] expression = IDENT.i IS null_value
			RETURN3,	// [53] expression = expr LT expr; returns 'expr' although none is marked
			RETURN3,	// [54] expression = expr GT expr; returns 'expr' although none is marked
			RETURN3,	// [55] expression = expr GE expr; returns 'expr' although none is marked
			RETURN3,	// [56] expression = expr LE expr; returns 'expr' although none is marked
			RETURN3,	// [57] expression = expr EQ expr; returns 'expr' although none is marked
			new Action() {	// [58] expr = expr.a MULT expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Expr(a.val * b.val);
				}
			},
			new Action() {	// [59] expr = expr.a DIV expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Expr(a.val / b.val);
				}
			},
			new Action() {	// [60] expr = expr.a PLUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Expr(a.val + b.val);
				}
			},
			new Action() {	// [61] expr = expr.a MINUS expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Expr(a.val - b.val);
				}
			},
			new Action() {	// [62] expr = LPAREN expr.e RPAREN
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_e = _symbols[offset + 2];
					final Expr e = (Expr) _symbol_e.value;
					 return e;
				}
			},
			new Action() {	// [63] expr = INTEGER_LITERAL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Integer n = (Integer) _symbol_n.value;
					 return new Expr(n);
				}
			},
			new Action() {	// [64] expr = FLOATING_POINT_LITERAL.n
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_n = _symbols[offset + 1];
					final Float n = (Float) _symbol_n.value;
					 return new Expr(n);
				}
			},
			new Action() {	// [65] expr = IDENT.i
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_i = _symbols[offset + 1];
					final String i = (String) _symbol_i.value;
					 return new Expr(0);
				}
			}
		};


    this.sema = new ScriptSemantics();
    this.report = SuperSqlEvents.getInstance();
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
